@inherits Bases.Component
@inject NiceUIService niceUIService
@inject Services.SessionInfoService SessionInfo
@inject Microsoft.JSInterop.IJSRuntime JS

<EditForm Model="@_frmDetails" OnValidSubmit="@Details_SaveAsync">
    <DataAnnotationsValidator />
    <div class="panel">
        <div class="panel__header">
            <h4 class="panel__title">General</h4>
        </div>
        <div class="panel__content">
            <div class="form">
                <div class="row">
                    <div class="col col-12 sm-6">
                        <div class="form__item">
                            <label class="form__label">Name</label>
                            <InputText @bind-Value="_frmDetails.Name" class="form__input" maxlength="200" />
                            <ValidationMessage For="@(() => _frmDetails.Name)" />
                        </div>
                    </div>
                    <div class="col col-12 sm-1">
                        <div class="form__item">
                            <label class="form__label">Enabled</label>
                            <span class="form__asp-checkbox">
                                <InputCheckbox @bind-Value=_frmDetails.Enabled id="Cb_EnableCollection" />
                                <label for="Cb_EnableCollection"></label>
                            </span>
                        </div>
                    </div>
                    <div class="col col-12 sm-3">
                        <div class="form__item">
                            <label class="form__label">Save to Umbraco</label>
                            <span class="form__asp-checkbox">
                                <InputCheckbox @bind-Value=_frmDetails.SaveToUmbraco id="Cb_SaveCollectionToUmbraco" />
                                <label for="Cb_SaveCollectionToUmbraco"></label>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col col-12 sm-6">
                        <div class="form__item">
                            <label class="form__label">Description</label>
                            <InputTextArea @bind-Value="_frmDetails.Description" class="form__textarea-large" maxlength="10000" />
                            <ValidationMessage For="@(() => _frmDetails.Description)" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col col-12  align--right">
            <button type="button" class="button  button__outline" disabled=@_processing @onclick="@Details_Reset" value="Cancel">Cancel</button>
            <button type="submit" class="button" disabled=@_processing value="Save">Save</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public Core.Common.Collection SelectedItem { get; set; } = new Core.Common.Collection();

    private FormDetails _frmDetails = new FormDetails();

    private class FormDetails
    {
        public string Name { get; set; } = "";

        public string Description { get; set; } = "";

        public bool Enabled { get; set; } = false;

        public bool SaveToUmbraco { get; set; } = false;
    }


    protected override void OnInitialized()
    {
        Details_Load();
    }

    private void Details_Load()
    {
        _frmDetails = new FormDetails
            {
                Name = this.SelectedItem.Name,
                Description = this.SelectedItem.Description,
                Enabled = this.SelectedItem.Enabled,
                SaveToUmbraco = this.SelectedItem.SaveToUmbraco
            };
    }

    private async Task Details_SaveAsync()
    {
        if (!(await StartProcessingAsync())) { return; }

        await this.SelectedItem.RefreshAsync();

        this.SelectedItem.Name = this._frmDetails.Name.Trim();
        this.SelectedItem.Description = this._frmDetails.Description.Trim();
        this.SelectedItem.Enabled = this._frmDetails.Enabled;
        this.SelectedItem.SaveToUmbraco = this._frmDetails.SaveToUmbraco;

        var objMessage = new Models.ToastNotification { Type = Models.ToastNotification.Types.Success, Message = "Changes saved." };

        if (!await SelectedItem.SaveAsync(SessionInfo.Current_User.Name_Full))
        {
            objMessage.Type = Models.ToastNotification.Types.Error;
            objMessage.Message = "We're sorry but there has been an issue updating the collection information, please try again or contact support for further assistance.";
        }
        else
        {
            Details_Load();
        }

        await EndProcessingAsync();

        await JS.InvokeVoidAsync("ScrollToTop");

        await niceUIService.ToastShowAsync(objMessage);

        objMessage = null;
    }

    private async Task Details_Reset()
    {
        if (!(await StartProcessingAsync())) { return; }

        Details_Load();

        await EndProcessingAsync();

        await JS.InvokeVoidAsync("ScrollToTop");

        await niceUIService.ToastShowAsync(new Models.ToastNotification { Type = Models.ToastNotification.Types.General, Message = "Changes cancelled." });
    }
}
