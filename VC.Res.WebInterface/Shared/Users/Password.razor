@inherits Bases.Component
@inject NiceUIService niceUIService
@inject Services.SessionInfoService SessionInfo

<EditForm Model="@_setPasswordForm" OnValidSubmit="@Change_SubmitAsync">
<DataAnnotationsValidator />
    <div class="panel">
	    <div class="panel__header">
		    <h4 class="panel__title">Change Password</h4>
	    </div>
        <div class="panel__content">
            <div class="form">
                <div class="row">
                    <div class="col col-12">
                        <div class="form__item"> 
					        <label class="form__label">New Password</label>
                            <InputText @bind-Value="_setPasswordForm.Password" class="form__input" type="password" maxlength="50" autocomplete="nope" />
                            <ValidationMessage For="@(() => _setPasswordForm.Password)" />
				        </div>
                    </div>
                    <div class="col col-12">
                        <div class="form__item"> 
					        <label class="form__label">Confirm password</label>
                            <InputText @bind-Value="_setPasswordForm.PasswordCompare" class="form__input" type="password" maxlength="50" autocomplete="nope" />
                            <ValidationMessage For="@(() => _setPasswordForm.PasswordCompare)" />
				        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col col-12  align--right">
            <button type="submit" class="button" disabled=@_processing value="Change" >Change</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public Core.Users.User SelectedUser { get; set; } = new Core.Users.User();

    private class FormSetPassword
    {
        [Required(ErrorMessage = "This field is required")]
        [Helpers.CustomDataAnnotations.PasswordLength(ErrorMessage = "10 to 30 characters required")]
        [Helpers.CustomDataAnnotations.PasswordComplexity(ErrorMessage = "Number, upper and lower case required")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "This field is required")]
        [Compare("Password", ErrorMessage = "This field does not match")]
        public string PasswordCompare { get; set; } = "";
    }

    private FormSetPassword _setPasswordForm = new FormSetPassword();

    //protected override void OnInitialized()
    //{

    //}

    //protected override async Task OnInitializedAsync()
    //{

    //}

    private async Task Change_SubmitAsync()
    {
        if (!(await StartProcessingAsync())) { return; }

        // default message to error
        var objReturnMessage = new Models.ToastNotification { Type = Models.ToastNotification.Types.Error, Message = "We're sorry but there has been an issue updating the account password, please try again or contact support for further assistance." };

        if (await Core.Users.User.Password_SetAsync(SelectedUser.Id, _setPasswordForm.Password, SessionInfo.Current_User.Id, SessionInfo.IPAddress))
        {
            objReturnMessage.Type = Models.ToastNotification.Types.Success;
            objReturnMessage.Message = "Account password updated.";
        }

        _setPasswordForm.Password = "";
        _setPasswordForm.PasswordCompare = "";

        await EndProcessingAsync();

        await niceUIService.ToastShowAsync(objReturnMessage);
    }
}
