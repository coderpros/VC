@inherits Bases.Component
@inject NiceUIService niceUIService
@inject Services.SessionInfoService SessionInfo

<div class="panel">
    <div class="panel__header">
        <h4 class="panel__title">@Core.Enums.Label_Plural(SelectedType)</h4>
        <button type="button" class="panel__header-button" disabled=@_processing @onclick="@RequestAddAsync" value="Add">
            Add
            <svg class="icon">
                <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/imgs/icons/icons__defs.svg#icon__plus"></use>
            </svg>
        </button>
    </div>
    <div class="panel__full-content">
        <SfGrid DataSource="@_related" AllowTextWrap="true" AllowRowDragAndDrop="true">
            <GridTextWrapSettings WrapMode="Syncfusion.Blazor.Grids.WrapMode.Content"></GridTextWrapSettings>
            <GridEvents TValue="Core.Premises.Related" RowDropping="RowDroppingHandlerAsync" OnActionComplete="ActionCompleteHandlerAsync"></GridEvents>
            <GridColumns>
                <GridColumn Field=@nameof(Core.Premises.Related.Id) HeaderText="ID" Width="80px" IsPrimaryKey="true" Visible="false"></GridColumn>
                <GridColumn HeaderText="Name">
                    <Template>
                        @{
                            var obj = (context as Core.Premises.Related);
                            if (obj != null)
                            {
                                var objPremise = _premises.FirstOrDefault(r => r.Id == obj.Premise_RelatedId);
                                if (objPremise != null)
                                {
                                    @objPremise.Name
                                }
                                objPremise = null;
                            }
                        }
                    </Template>
                </GridColumn>
                <GridColumn Width="42px">
                    <Template>
                        @{
                            var obj = (context as Core.Premises.Related);
                            if (obj != null)
                            {
                                <a @onclick="(() => RequestDelete(obj.Id))" @onclick:preventDefault class="button button__clear button--icon" title="Delete">
                                    <svg class="icon icon--red">
                                        <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/imgs/icons/icons__defs.svg#icon__delete"></use>
                                    </svg>
                                </a>
                            }
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

<VC.Res.WebInterface.Shared.Modals.Premises.RelatedAdd @ref="_modalAdd" OnClosed="ModalAddClosedHandlerAsync" />

<VC.Res.WebInterface.Shared.Modals.Confirmation @ref="_modalDeleteConfirm" Message="Are you sure you wish to delete this item?" OnClosed="ModalDeleteConfirmClosedHandlerAsync" />

@code {
    [Parameter] public Core.Premises.Premise SelectedItem { get; set; } = new Core.Premises.Premise();

    [Parameter] public Core.Enums.Premises_Related_Type SelectedType { get; set; } = Core.Enums.Premises_Related_Type.Unknown;

    private Shared.Modals.Premises.RelatedAdd? _modalAdd = null;
    private Shared.Modals.Confirmation? _modalDeleteConfirm = null;

    private List<Core.Premises.Related> _related = new List<Core.Premises.Related>();
    private List<Core.Premises.Premise> _premises = new List<Core.Premises.Premise>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshAsync(bShowSpinner: false);
    }

    private async Task RefreshAsync(bool bShowSpinner = true)
    {
        if (!(await StartProcessingAsync(bShowSpinner))) { return; }

        _related = await Core.Premises.Related.FindAllBy_PremiseAsync(SelectedItem.Id, SelectedType);
        _premises = await Core.Premises.Premise.FindAllAsync(_related.Select(r => r.Premise_RelatedId).ToList());

        await EndProcessingAsync(bShowSpinner);
    }

    public async Task RowDroppingHandlerAsync(RowDroppingEventArgs<Core.Premises.Related> args)
    {
        if (args.DropIndex == args.FromIndex)
        {
            return;
        }

        if (args.Data.Count > 0)
        {
            if (!(await StartProcessingAsync())) { return; }

            var objDropIndexItem = _related[Convert.ToInt32(args.DropIndex)];
            var objMoved = args.Data[0];

            _ = await Core.Premises.Related.Move_ToPositionAsync(objMoved.Id, objDropIndexItem.Order);

            objDropIndexItem = null;
            objMoved = null;

            await EndProcessingAsync();
        }
    }

    public async Task ActionCompleteHandlerAsync(ActionEventArgs<Core.Premises.Related> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Refresh) { return; }

        await RefreshAsync();
    }

    private async Task RequestAddAsync()
    {
        if (_processing) { return; }

        if (_modalAdd != null) { await _modalAdd.OpenAsync(SelectedItem.Id, SelectedType); }
    }

    private async Task ModalAddClosedHandlerAsync(Models.ModalResponse objResponse)
    {
        if (!objResponse.Cancelled)
        {
            if (objResponse.Successful)
            {
                // display success
                await niceUIService.ToastShowAsync(new Models.ToastNotification { Type = Models.ToastNotification.Types.Success, Message = "Item added." });

                //refresh grid
                await RefreshAsync();
            }
            else if (!string.IsNullOrWhiteSpace(objResponse.Message_Wording))
            {
                // display message
                await niceUIService.ToastShowAsync(new Models.ToastNotification { Type = Models.ToastNotification.Types.Error, Message = objResponse.Message_Wording });
            }
        }
    }

    private void RequestDelete(int iId)
    {
        if (_processing) { return; }

        if (_modalDeleteConfirm != null) { _modalDeleteConfirm.Open(iId); }
    }

    private async Task ModalDeleteConfirmClosedHandlerAsync(Models.ModalResponse objResponse)
    {
        if (objResponse.Successful && objResponse.Selected_Id.HasValue)
        {
            if (!(await StartProcessingAsync())) { return; }

            var objMessage = new Models.ToastNotification
                {
                    Type = Models.ToastNotification.Types.Error,
                    Message = "We're sorry but there has been a problem deleting the selected item, please try again or contact support for further assistance."
                };

            if (await Core.Premises.Related.DeleteFullAsync(objResponse.Selected_Id.Value, strBy: SessionInfo.Current_User.Name_Full))
            {
                objMessage.Type = Models.ToastNotification.Types.Success;
                objMessage.Message = "Item deleted.";
            }

            await EndProcessingAsync();

            await RefreshAsync();

            await niceUIService.ToastShowAsync(objMessage);

            objMessage = null;
        }
    }
}
