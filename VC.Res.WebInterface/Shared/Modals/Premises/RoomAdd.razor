@inherits Bases.Modal
@inject NiceUIService niceUIService
@inject Services.SessionInfoService SessionInfo

<SfDialog Width="600px" IsModal="true" @bind-Visible="_visible">
    <DialogTemplates>
        <Header>Add @Core.Enums.Label(RoomType)</Header>
        <Content>
            <EditForm Model="@_form">
                <DataAnnotationsValidator />
                <div class="form">
                    <div class="row">
                        <div class="col col-12">
                            <div class="form__item">
                                <label class="form__label">Name</label>
                                <InputText @bind-Value="_form.Name" class="form__input" type="text" maxlength="100" />
                                <ValidationMessage For="@(() => _form.Name)" />
                            </div>
                        </div>
                        <div class="col col-12">
                            <div class="form__item">
                                <label class="form__label">Website description</label>
                                <InputTextArea @bind-Value="_form.Description" class="form__textarea" />
                                <ValidationMessage For="@(() => _form.Description)" />
                            </div>
                        </div>
                        <div class="col col-12">
                            <div class="form__item">
                                <label class="form__label">VC notes</label>
                                <InputTextArea @bind-Value="_form.Note" class="form__textarea" />
                                <ValidationMessage For="@(() => _form.Note)" />
                            </div>
                        </div>
                    </div>

                    <div class="y-spacer y-spacer__24"></div>
                    <h4>Beds</h4>
                    <div class="row">
                        <div class="col col-12 sm-3">
                            <div class="form__item">
                                <label class="form__label">Double</label>
                                <InputNumber @bind-Value="_form.DoubleBeds" class="form__input" />
                                <ValidationMessage For="@(() => _form.DoubleBeds)" />
                            </div>
                        </div>
                        <div class="col col-12 sm-3">
                            <div class="form__item">
                                <label class="form__label">Twin / double</label>
                                <InputNumber @bind-Value="_form.TwinDoubleBeds" class="form__input" />
                                <ValidationMessage For="@(() => _form.TwinDoubleBeds)" />
                            </div>
                        </div>
                        <div class="col col-12 sm-3">
                            <div class="form__item">
                                <label class="form__label">Twin</label>
                                <InputNumber @bind-Value="_form.TwinBeds" class="form__input" />
                                <ValidationMessage For="@(() => _form.TwinBeds)" />
                            </div>
                        </div>
                        <div class="col col-12 sm-3">
                            <div class="form__item">
                                <label class="form__label">Single</label>
                                <InputNumber @bind-Value="_form.SingleBeds" class="form__input" />
                                <ValidationMessage For="@(() => _form.SingleBeds)" />
                            </div>
                        </div>
                        <div class="col col-12 sm-3">
                            <div class="form__item">
                                <label class="form__label">Bunk</label>
                                <InputNumber @bind-Value="_form.BunkBeds" class="form__input" />
                                <ValidationMessage For="@(() => _form.BunkBeds)" />
                            </div>
                        </div>

                        <div class="col col-12 sm-3">
                            <div class="form__item">
                                <label class="form__label">Sofa bed</label>
                                <InputNumber @bind-Value="_form.SofaBeds" class="form__input" />
                                <ValidationMessage For="@(() => _form.SofaBeds)" />
                            </div>
                        </div>
                        <div class="col col-12 sm-3">
                            <div class="form__item">
                                <label class="form__label">Children's bed</label>
                                <InputNumber @bind-Value="_form.ChildBeds" class="form__input" />
                                <ValidationMessage For="@(() => _form.ChildBeds)" />
                            </div>
                        </div>
                        <div class="col col-12 sm-3">
                            <div class="form__item">
                                <label class="form__label">Ensuite</label>
                                <span class="form__asp-checkbox">
                                    <InputCheckbox @bind-Value=_form.Ensuite id="Cb_Ensuite" />
                                    <label for="Cb_Ensuite">Yes</label>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Cancel" Disabled=@_processing OnClick="@CancelClickAsync" />
        <DialogButton Content="Add" Disabled=@_processing IsPrimary="true" OnClick="@AddClickAsync" />
    </DialogButtons>
    <DialogEvents OnOverlayModalClick="@OverlayClickAsync"></DialogEvents>
    <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
</SfDialog>

@code {
    private int PremiseId = 0;
    private VC.Shared.Enums.Premises_Room_Type RoomType = VC.Shared.Enums.Premises_Room_Type.Unknown;

    private ModalForm _form = new ModalForm();

    public class ModalForm
    {
        [Required(ErrorMessage = "This field is required")]
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string Note { get; set; } = "";

        public int DoubleBeds { get; set; } = 0;
        public int TwinDoubleBeds { get; set; } = 0;
        public int TwinBeds { get; set; } = 0;
        public int SingleBeds { get; set; } = 0;
        public int BunkBeds { get; set; } = 0;
        public int SofaBeds { get; set; } = 0;
        public int ChildBeds { get; set; } = 0;
        public bool Ensuite { get; set; } = false;

        public bool Access_Inside { get; set; } = false;
        public bool Access_Outside { get; set; } = false;
    }

    public void Open(int iPremiseId, VC.Shared.Enums.Premises_Room_Type enumType)
    {
        PremiseId = iPremiseId;
        RoomType = enumType;

        _form = new ModalForm();

        _visible = true;
        this.StateHasChanged();
    }

    private async Task AddClickAsync()
    {
        if (!System.ComponentModel.DataAnnotations.Validator.TryValidateObject(_form, new ValidationContext(_form), null)) { return; }

        if (!(await StartProcessingAsync())) { return; }

        var objResponse = new Models.ModalResponse();

        var obj = new Core.Premises.Room
            {
                Name = _form.Name.Trim(),
                Description = _form.Description.Trim(),
                Note = _form.Note.Trim(),

                Beds_Double = _form.DoubleBeds,
                Beds_TwinDouble = _form.TwinDoubleBeds,
                Beds_Twin = _form.TwinBeds,
                Beds_Single = _form.SingleBeds,
                Beds_Bunk = _form.BunkBeds,
                Beds_Sofa = _form.SofaBeds,
                Beds_Child = _form.ChildBeds,
                Ensuite = _form.Ensuite,

                Access_Inside = _form.Access_Inside,
                Access_Outside = _form.Access_Outside
            };

        if (await obj.CreateAsync(PremiseId, RoomType, SessionInfo.Current_User.Name_Full))
        {
            objResponse.Successful = true;
            objResponse.Selected_Id = obj.Id;
        }

        await EndProcessingAsync();

        if (objResponse.Successful)
        {
            Close();

            await OnClosed.InvokeAsync(objResponse);
        }
        else
        {
            await niceUIService.ToastShowAsync(new Models.ToastNotification { Type = Models.ToastNotification.Types.Error, Message = "We're sorry but there has been a problem adding the new item, please try again or contact support for further assistance." });
        }

        obj = null;
    }
}
