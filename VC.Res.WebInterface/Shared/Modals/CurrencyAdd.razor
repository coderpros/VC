@inherits Bases.Modal
@inject NiceUIService niceUIService
@inject Services.SessionInfoService SessionInfo

<SfDialog Width="400px" IsModal="true" @bind-Visible="_visible">
    <DialogTemplates>
        <Header>Add currency</Header>
        <Content>
            <EditForm Model="@_form">
                <DataAnnotationsValidator />
                <div class="form">
                    <div class="row">
                        <div class="col col-12">
                            <div class="form__item">
                                <label class="form__label">Name</label>
                                <InputText @bind-Value="_form.Name" class="form__input" type="text" maxlength="200" />
                                <ValidationMessage For="@(() => _form.Name)" />
                            </div>
                        </div>
                        <div class="col col-12">
                            <div class="form__item">
                                <label class="form__label">Code</label>
                                <InputText @bind-Value="_form.Code" class="form__input" type="text" maxlength="10" />
                                <ValidationMessage For="@(() => _form.Code)" />
                            </div>
                        </div>
                        <div class="col col-12 sm-6">
                            <div class="form__item">
                                <label class="form__label">Symbol</label>
                                <InputText @bind-Value="_form.Symbol" class="form__input" type="text" maxlength="10" />
                                <ValidationMessage For="@(() => _form.Symbol)" />
                            </div>
                        </div>
                        <div class="col col-12 sm-6">
                            <div class="form__item">
                                <label class="form__label">Symbol After</label>
                                <span class="form__asp-checkbox">
                                    <InputCheckbox @bind-Value=_form.SymbolAfter id="Cb_Currency_SymbolAfter" />
                                    <label for="Cb_Currency_SymbolAfter">Yes</label>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Cancel" Disabled=@_processing OnClick="@CancelClickAsync" />
        <DialogButton Content="Add" Disabled=@_processing IsPrimary="true" OnClick="@AddClickAsync" />
    </DialogButtons>
    <DialogEvents OnOverlayModalClick="@OverlayClickAsync"></DialogEvents>
    <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
</SfDialog>

@code {
    private ModalForm _form = new ModalForm();

    public class ModalForm
    {
        [Required(ErrorMessage = "This field is required")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "This field is required")]
        public string Code { get; set; } = "";

        [Required(ErrorMessage = "This field is required")]
        public string Symbol { get; set; } = "";

        public bool SymbolAfter { get; set; } = false;
    }

    public void Open()
    {
        _form = new ModalForm();

        _visible = true;
        this.StateHasChanged();
    }

    private async Task AddClickAsync()
    {
        if (!System.ComponentModel.DataAnnotations.Validator.TryValidateObject(_form, new ValidationContext(_form), null)) { return; }

        // start processing
        if (!(await StartProcessingAsync())) { return; }

        // setup a modal closed response
        var objResponse = new Models.ModalResponse();

        var obj = new Core.Common.Currency
            {
                Name = _form.Name.Trim(),
                Code = _form.Code.Trim(),
                Symbol = _form.Symbol.Trim(),
                SymbolAfter = _form.SymbolAfter
            };

        if (await obj.CreateAsync(SessionInfo.Current_User.Name_Full))
        {
            objResponse.Successful = true;
            objResponse.Selected_Id = obj.Id;
        }

        // done processing
        await EndProcessingAsync();

        if (objResponse.Successful)
        {
            // close the modal
            Close();

            await OnClosed.InvokeAsync(objResponse);
        }
        else
        {
            // display message
            await niceUIService.ToastShowAsync(new Models.ToastNotification { Type = Models.ToastNotification.Types.Error, Message = "We're sorry but there has been a problem adding the new item, please try again or contact support for further assistance." });
        }

        obj = null;
    }
}
