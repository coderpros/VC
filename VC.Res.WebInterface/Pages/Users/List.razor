@page "/users"
@layout Shared.Layouts.StandardLayout
@inherits Bases.Component
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NiceUIService niceUIService
@inject NavigationManager NavigationManager
@inject Services.SessionInfoService SessionInfo
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Users</PageTitle>

<section class="sub-header dragscroll" data-hScroll-wrapper>
    <div class="sub-header__btn sub-header__btn--menu-toggle" data-sidebar-toggle data-hScroll-item>
        <svg class="icon">
            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/imgs/icons/icons__defs.svg#icon__close"></use>
        </svg>
        <span class="sub-header__btn-text">Hide</span>
    </div>

    <div class="sub-header__btn" data-hScroll-item>
		<span class="sub-header__btn-text">Users</span>
	</div>

    <a @onclick="(() => RequestAdd())" @onclick:preventDefault class="sub-header__btn" title="Add new user" data-hScroll-item>
        <svg class="icon">
            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/imgs/icons/icons__defs.svg#icon__edit"></use>
        </svg>
        <span class="sub-header__btn-text">Add new</span>
    </a>
</section>

<section class="main-content__wrapper">
    <section class="sidebar__wrapper" data-sidebar>
        <div class="sidebar">
            <EditForm Model="@_filtersForm" OnValidSubmit="@Users_RefreshAsync">
                <div class="form__item">
                    <label class="form__label">Name</label>
                    <InputText @bind-Value="_filtersForm.Name" class="form__input" maxlength="50" />
                    <ValidationMessage For="@(() => _filtersForm.Name)" />
                </div>

                <div class="form__item">
                    <label class="form__label">Email</label>
                    <InputText @bind-Value="_filtersForm.Email" class="form__input" maxlength="50" />
                    <ValidationMessage For="@(() => _filtersForm.Email)" />
                </div>

                <div class="form__item">
                    <span class="form__asp-checkbox">
                        <InputCheckbox id="Cb_Filters_Admin" @bind-Value="_filtersForm.Admin" />
                        <label for="Cb_Filters_Admin">Admins Only</label>
                    </span>
                </div>

                <div class="y-spacer y-spacer__16"></div>
                
                <button type="submit" class="button" disabled=@_processing value="Filter" >Filter</button>
                <button type="button" class="button  button__outline" disabled=@_processing @onclick="@Filters_Clear" value="Clear">Clear</button>
            </EditForm>
        </div>
    </section>

    <div class="main-content">
        <SfGrid DataSource="@_pagedData.Elements" AllowTextWrap="true">
            <GridTextWrapSettings WrapMode="Syncfusion.Blazor.Grids.WrapMode.Content"></GridTextWrapSettings> 
            <GridColumns>
                <GridColumn Width="42px">
                    <Template>
                        @{
                            var UserInfo = (context as Core.Users.User);
                            if (UserInfo != null)
                            {
                                if (UserInfo.Id != SessionInfo.Current_User.Id)
                                {
                                    <a href="@Core.UrlHelpers.Interface.URL_Get(Core.UrlHelpers.Interface.Pages.Users_Edit, iParameterId1: UserInfo.Id)" class="button button__clear button--icon" title="Edit @UserInfo.Name_Full">
                                        <svg class="icon">
                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/imgs/icons/icons__defs.svg#icon__edit"></use>
                                        </svg>
                                    </a>
                                }
                            }
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(Core.Users.User.Id) HeaderText="ID" Width="80px" IsPrimaryKey="true"></GridColumn>
                <GridColumn Field=@nameof(Core.Users.User.Name_Last) HeaderText="Last name"></GridColumn>
                <GridColumn Field=@nameof(Core.Users.User.Name_First) HeaderText="First name"></GridColumn>
                <GridColumn Field=@nameof(Core.Users.User.Email) HeaderText="Email"></GridColumn>
                <GridColumn Field=@nameof(Core.Users.User.Access_SysAdmin) HeaderText="Admin" Width="80px"></GridColumn>
                <GridColumn Field=@nameof(Core.Users.User.LastLogin_Local) HeaderText="Last login"></GridColumn>
                <GridColumn Width="42px">
                    <Template>
                        @{
                            var UserInfo = (context as Core.Users.User);
                            if (UserInfo != null)
                            {
                                if (UserInfo.Id != SessionInfo.Current_User.Id)
                                {
                                    <a @onclick="(() => RequestDelete(UserInfo.Id))" @onclick:preventDefault class="button button__clear button--icon" title="Delete @UserInfo.Name_Full">
                                        <svg class="icon icon--red">
                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/imgs/icons/icons__defs.svg#icon__delete"></use>
                                        </svg>
                                    </a>
                                }
                            }
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>

        @if (_pagedData.TotalPages > 1)
        {
            <div class="pagination">
            @foreach(var vPage in _pagedData.PagingData())
            {
                <a @onclick="(() => ChangePage(vPage.Page))" @onclick:preventDefault title="@vPage.Title" class="pagination__item">@((MarkupString)vPage.Text)</a>
            }
            </div>
        }
    </div>
</section>

<VC.Res.WebInterface.Shared.Modals.Users.UserAdd @ref="_modalAdd" OnClosed="ModalAddClosedHandler" />

<VC.Res.WebInterface.Shared.Modals.Confirmation @ref="_modalDeleteConfirm" Message="Are you sure you wish to delete this user?" OnClosed="ModalDeleteConfirmClosedHandler" />

@code {
    private Shared.Modals.Users.UserAdd? _modalAdd = null;
    private Shared.Modals.Confirmation? _modalDeleteConfirm = null;

    private Core.Utilities.PagedData<Core.Users.User> _pagedData = new Core.Utilities.PagedData<Core.Users.User>(0);

    private Models.PageFilters.Users_List _filtersForm = new Models.PageFilters.Users_List();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var previousFilters = await ProtectedSessionStore.GetAsync<Models.PageFilters.Users_List>("Filters_UsersList");

            if (previousFilters.Success)
            {
                if (previousFilters.Value != null)
                {
                    _filtersForm = previousFilters.Value;
                }
            }
        }
        catch (Exception)
        {
        }
        finally
        {
            await Users_RefreshAsync();
        }
    }

    private async Task Filters_Clear()
    {
        _filtersForm = new Models.PageFilters.Users_List();
        await Users_RefreshAsync();
    }

    private async Task Users_RefreshAsync()
    {
        if (!(await StartProcessingAsync())) { return; }

        var lstFilters_Users = new Core.Utilities.FilterList<Core.Users.User.FilterOption>();
        lstFilters_Users.Add(Core.Users.User.FilterOption.Date_Deleted_UTC, new Core.Utilities.DateFilter(bEqualNull: true));

        if (!string.IsNullOrWhiteSpace(_filtersForm.Name))
        {
            lstFilters_Users.Add(Core.Users.User.FilterOption.Name, _filtersForm.Name.Trim());
        }

        if (!string.IsNullOrWhiteSpace(_filtersForm.Email))
        {
            lstFilters_Users.Add(Core.Users.User.FilterOption.Email, _filtersForm.Email.Trim());
        }

        if (_filtersForm.Admin)
        {
            lstFilters_Users.Add(Core.Users.User.FilterOption.Access_SysAdmin, true);
        }

        _pagedData = await Core.Users.User.ListPagedAsync(lstFilters_Users.Filters, iPage: _filtersForm.CurrentPage);
        lstFilters_Users = null;

        if (_pagedData.CurrentPage != _filtersForm.CurrentPage) { _filtersForm.CurrentPage = _pagedData.CurrentPage; }

        await ProtectedSessionStore.SetAsync("Filters_UsersList", _filtersForm);

        await EndProcessingAsync();
    }

    private async Task ChangePage(int iPage)
    {
        if (_processing) { return; }

        _filtersForm.CurrentPage = iPage;
        await Users_RefreshAsync();
    }

    private void RequestAdd()
    {
        if (_processing) { return; }

        if (_modalAdd != null) { _modalAdd.Open(); }
    }

    private async Task ModalAddClosedHandler(Models.ModalResponse objResponse)
    {
        if (!objResponse.Cancelled)
        {
            if (objResponse.Successful)
            {
                await niceUIService.ToastShowAsync(new Models.ToastNotification { Type = Models.ToastNotification.Types.Success, Message = "Item added." });
            }
            else if (!string.IsNullOrWhiteSpace(objResponse.Message_Wording))
            {
                await niceUIService.ToastShowAsync(new Models.ToastNotification { Type = Models.ToastNotification.Types.Error, Message = objResponse.Message_Wording });
            }
        }

        await Users_RefreshAsync();
    }

    private void RequestDelete(int iId)
    {
        if (_processing) { return; }

        if (_modalDeleteConfirm != null) { _modalDeleteConfirm.Open(iId); }
    }

    private async Task ModalDeleteConfirmClosedHandler(Models.ModalResponse objResponse)
    {
        if (objResponse.Successful && objResponse.Selected_Id.HasValue)
        {
            if (!(await StartProcessingAsync())) { return; }

            var objMessage = new Models.ToastNotification
                {
                    Type = Models.ToastNotification.Types.Error,
                    Message = "We're sorry but there has been a problem deleting the selected item, please try again or contact support for further assistance."
                };

            if (await Core.Users.User.DeleteAsync(objResponse.Selected_Id.Value, SessionInfo.Current_User.Id))
            {
                objMessage.Type = Models.ToastNotification.Types.Success;
                objMessage.Message = "Item deleted.";
            }

            await EndProcessingAsync();

            await Users_RefreshAsync();

            await niceUIService.ToastShowAsync(objMessage);

            objMessage = null;
        }
    }
}
