@page "/reset-password"
@layout Shared.Layouts.NoAuthLayout
@inherits Bases.Component
@inject NiceUIService niceUIService
@inject NavigationManager NavigationManager
@inject Services.SessionInfoService SessionInfo

<PageTitle>Reset your password</PageTitle>

@if (!bError)
{
    <div class="login">
        <div class="login__window-wrapper">
            <div class="login__window">
                <div class="login__logo">
                    <img src="@strLogoUrl" alt=""  />
                </div>
                <div class="login__header">
                    <h4 class="login__header-title">Reset your password</h4>
                    <p class="login__header-intro">Enter your new password to complete the reset.</p>
                </div>

                <EditForm Model="@_setForm" OnValidSubmit="@Set_SubmitAsync">
                    <DataAnnotationsValidator />
                    <div class="login__content">
                        <div class="form__item"> 
                            <label for="Tb_Install_Password" class="form__label">Password</label>
                            <InputText id="Tb_Install_Password" @bind-Value="_setForm.Password" class="form__input" type="password" maxlength="50" autocomplete="nope" />
                            <ValidationMessage For="@(() => _setForm.Password)" />
                        </div>
                        <div class="form__item"> 
                            <label for="Tb_Install_PasswordConfirm" class="form__label">Confirm password</label>
                            <InputText id="Tb_Install_PasswordConfirm" @bind-Value="_setForm.PasswordCompare" class="form__input" type="password" maxlength="50" autocomplete="nope" />
                            <ValidationMessage For="@(() => _setForm.PasswordCompare)" />
                        </div>  

                        <div class="y-spacer y-spacer__16"></div>
                        <button type="submit" class="button button--wide" disabled=@_processing value="Set" >Set password</button>
                    </div>
                </EditForm>

                <a href="@Core.UrlHelpers.Interface.URL_Get(Core.UrlHelpers.Interface.Pages.Login)" class="login__button">Back to login</a>
            </div>
        </div>
    </div>
}
else
{
    <div class="login">
	    <div class="login__window-wrapper">
		    <div class="login__window">
			    <div class="login__logo">
				    <img src="@strLogoUrl" alt=""  />
			    </div>
			    <div class="login__header">
				    <h4 class="login__header-title">Invalid Link</h4>
				    <p class="login__header-intro">We're sorry but the link you have used does not appear to be valid or has expired, please try again or contact us for further assistance.</p>
			    </div>
                <div class="login__content">
				    
                </div>
                <a href="/" title="Return to the login" class="login__button">Return to the Login</a>
		    </div>
	    </div>
    </div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public string? Email_Id_Enc { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "key")]
    public string? Email_Key { get; set; }

    private bool bError = false;
    private string strLogoUrl = "/imgs/logo-icon.png?width=250&height=150&rmode=max";
    private int iUserId = 0;

    private class SetForm
    {
        [Required(ErrorMessage = "This field is required")]
        [Helpers.CustomDataAnnotations.PasswordLength(ErrorMessage = "10 to 30 characters required")]
        [Helpers.CustomDataAnnotations.PasswordComplexity(ErrorMessage = "Number, upper and lower case required")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "This field is required")]
        [Compare("Password", ErrorMessage = "This field does not match")]
        public string PasswordCompare { get; set; } = "";
    }

    private SetForm _setForm = new SetForm();

    protected override void OnInitialized()
    {
        //bError = !Set_ValidateAsync(false);
    }

    protected override async Task OnInitializedAsync()
    {
        bError = !(await Set_ValidateAsync(false));
    }

    private async Task<bool> Set_ValidateAsync(bool bLinkUsed = false)
    {
        if (string.IsNullOrWhiteSpace(Email_Id_Enc) || string.IsNullOrWhiteSpace(Email_Key))
        {
            return false;
        }

        if (!int.TryParse(Core.Utilities.Security.DecryptString(Email_Id_Enc), out var iEmailId))
        {
            return false;
        }

        var objEmail = await Core.Utilities.Email.FindAsync(Core.Enums.Utilities_Email_Type.User_PasswordReset, Email_Key);

        if (!objEmail.Loaded || !objEmail.CanBeUsed || objEmail.Id != iEmailId || !objEmail.User_Id.HasValue)
        {
            return false;
        }

        if (bLinkUsed)
        {
            // mark the email as used
            _ = await Core.Utilities.Email.Update_UsedAsync(objEmail.Id);
        }

        iUserId = objEmail.User_Id.Value;

        return true;
    }

    private async Task Set_SubmitAsync()
    {
        if (!(await StartProcessingAsync())) { return; }

        if (_setForm.Password != _setForm.PasswordCompare)
        {
            await EndProcessingAsync();
            await niceUIService.ToastShowAsync(new Models.ToastNotification { Type = Models.ToastNotification.Types.Warning, Message = "Please ensure your new password and confirmation match." });
            return;
        }

        // check link, if ok, reset
        if (await Set_ValidateAsync(bLinkUsed: true))
        {
            if (await Core.Users.User.Password_SetAsync(iUserId, _setForm.Password, iUserId, SessionInfo.IPAddress))
            {
                await EndProcessingAsync();

                NavigationManager.NavigateTo(Core.UrlHelpers.Interface.URL_Get(Core.UrlHelpers.Interface.Pages.Login));

                // wait for page to switch back to login page
                await Task.Delay(50);

                await niceUIService.ToastShowAsync(new Models.ToastNotification { Type = Models.ToastNotification.Types.Success, Message = "Your password has been successfully updated." });
            }
            else
            {
                await niceUIService.ToastShowAsync(new Models.ToastNotification { Type = Models.ToastNotification.Types.Error, Message = "We're sorry but an error has occurred attempting to process your request, please contact us for further assistance." });
            }
        }
        else
        {
            bError = true;
            await EndProcessingAsync();
        }
    }
}
