@page "/countries/edit/{Id:int}"
@layout Shared.Layouts.StandardLayout
@inherits Bases.Component
@inject NiceUIService niceUIService
@inject NavigationManager NavigationManager
@inject Services.SessionInfoService SessionInfo

<PageTitle>Countries - Edit</PageTitle>

<section class="sub-header dragscroll" data-hScroll-wrapper>
    <a href="@Core.UrlHelpers.Interface.URL_Get(Core.UrlHelpers.Interface.Pages.Countries_List)" class="sub-header__btn" title="Return to countries" data-hScroll-item>
        <svg class="icon icon--small">
			<use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/imgs/icons/icons__defs.svg#icon__left-arrow"></use>
		</svg>
		<span class="sub-header__btn-text">Back to list</span>
    </a>

    <div class="sub-header__btn" data-hScroll-item>
        <span class="sub-header__btn-text">Countries > Edit: @_SelectedItem.Name</span>
	</div>

    @if (Core.Settings.Global.Fetch.Website_APIEnabled && !_SelectedItem.Website_Id.HasValue)
    {
        <a @onclick="(() => RequestAddToWebsiteAsync())" @onclick:preventDefault class="sub-header__btn" title="Add to website" data-hScroll-item>
            <svg class="icon">
                <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/imgs/icons/icons__defs.svg#icon__link"></use>
            </svg>
            <span class="sub-header__btn-text">Add to website</span>
        </a>
    }
</section>

<section class="main-content__wrapper">
    <div class="main-content">
        @if (_SelectedItem.Loaded)
        {
            <SfTab>
                <TabAnimationSettings>
                    <TabAnimationNext Effect="AnimationEffect.None" />
                    <TabAnimationPrevious Effect="AnimationEffect.None" />
                </TabAnimationSettings>
                <TabEvents Selecting="OnTabSelecting" />
                <TabItems>
                    <TabItem>
                        <HeaderTemplate>Details</HeaderTemplate>
                        <ContentTemplate>
                            <VC.Res.WebInterface.Shared.Countries.Details SelectedItem=@_SelectedItem />
                        </ContentTemplate>
                    </TabItem>

                    <TabItem>
                        <HeaderTemplate>Regions</HeaderTemplate>
                        <ContentTemplate>
                            <VC.Res.WebInterface.Shared.Countries.Regions SelectedItem=@_SelectedItem />
                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>
        }
    </div>
</section>

@code {
    [Parameter] public int Id { get; set; }

    private Core.Common.Country _SelectedItem { get; set; } = new Core.Common.Country();

    protected override async Task OnInitializedAsync()
    {
        _SelectedItem = await Core.Common.Country.FindAsync(Id);

        if (!_SelectedItem.Loaded || _SelectedItem.Deleted_UTC.HasValue)
        {
            // shouldn't be accessing
            NavigationManager.NavigateTo(Core.UrlHelpers.Interface.URL_Get(Core.UrlHelpers.Interface.Pages.Countries_List));
            return;
        }
    }

    private void OnTabSelecting(SelectingEventArgs args)
    {
        if (args.IsSwiped) { args.Cancel = true; }
    }

    private async Task RequestAddToWebsiteAsync()
    {
        if (!(await StartProcessingAsync())) { return; }

        // try and submit to the website
        _ = await _SelectedItem.RefreshAsync();

        var objMessage = new Models.ToastNotification { Type = Models.ToastNotification.Types.Error, Message = "We're sorry but there has been a problem submitting the country to the website, please try again or contact support for further assistance." };

        if ((await Core.Integrations.Website.API.Country_CreateAsync(_SelectedItem)).Result)
        {
            // successfully submitted to the website
            _ = await _SelectedItem.RefreshAsync();

            objMessage.Type = Models.ToastNotification.Types.Success;
            objMessage.Message = "Country added to the website.";
        }

        await EndProcessingAsync();

        await niceUIService.ToastShowAsync(objMessage);

        objMessage = null;
    }
}
