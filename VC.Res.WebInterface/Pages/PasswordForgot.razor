@page "/forgot-password"
@layout Shared.Layouts.NoAuthLayout
@inherits Bases.Component
@inject NiceUIService niceUIService
@inject NavigationManager NavigationManager
@inject Services.SessionInfoService SessionInfo

<PageTitle>Forgot your password</PageTitle>

<div class="login">
	<div class="login__window-wrapper">
		<div class="login__window">
			<div class="login__logo">
				<img src="@strLogoUrl" alt=""  />
			</div>
			<div class="login__header">
				<h4 class="login__header-title">Forgot your password?</h4>
                <p class="login__header-intro">Enter your email address and we'll send you instructions to reset your password.</p>
			</div>

            <EditForm Model="@_resetForm" OnValidSubmit="@Reset_SubmitAsync">
                <DataAnnotationsValidator />
                <div class="login__content">
                    <div class="form__item">
					    <label for="tb_LoginForm_Email" class="form__label">Email address</label>
                        <InputText id="tb_LoginForm_Email" @bind-Value="_resetForm.Email" class="form__input" type="email" maxlength="50" />
                        <ValidationMessage For="@(() => _resetForm.Email)" />
				    </div>    

				    <div class="y-spacer y-spacer__16"></div>
                    <button type="submit" class="button button--wide" disabled=@_processing value="Reset" >Reset password</button>
                </div>
            </EditForm>

            <a href="@Core.UrlHelpers.Interface.URL_Get(Core.UrlHelpers.Interface.Pages.Login)" class="login__button">Back to login</a>
		</div>
	</div>
</div>


@code {
    private string strLogoUrl = "/imgs/logo-icon.png?width=250&height=150&rmode=max";

    private class ResetForm
    {
        [Required(ErrorMessage = "This field is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }
    }

    private ResetForm _resetForm = new ResetForm();

    protected override void OnInitialized()
    {
        if (SessionInfo.Valid(bForceRefresh: true))
        {
            NavigationManager.NavigateTo(VC.Res.Core.UrlHelpers.Interface.URL_Get(Core.UrlHelpers.Interface.Pages.Dashboard), forceLoad: true);
            return;
        }
    }

    private async Task Reset_SubmitAsync()
    {
        if (!(await StartProcessingAsync())) { return; }

        _ = await Core.Users.User.Password_RequestResetAsync(_resetForm.Email.Trim(), SessionInfo.IPAddress);

        await EndProcessingAsync();

        //await niceUIService.ToastShowAfterReloadAsync(new Models.ToastNotification { Type = Models.ToastNotification.Types.Success, Message = "Please check your email account, if an account has been found with the provided address you will receive instructions on how to reset your password." });

        NavigationManager.NavigateTo(Core.UrlHelpers.Interface.URL_Get(Core.UrlHelpers.Interface.Pages.Login));

        // wait for page to switch back to login page
        await Task.Delay(50);

        await niceUIService.ToastShowAsync(new Models.ToastNotification { Type = Models.ToastNotification.Types.Success, Message = "Please check your email account, if an account has been found with the provided address you will receive instructions on how to reset your password." });
    }
}
